This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-01T18:58:23.917Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
app/
  globals.css
  layout.tsx
  page.tsx
components/
  ui/
    card.tsx
    chart.tsx
    select.tsx
    slider.tsx
    tabs.tsx
  Controls.tsx
  CSSDisplay.tsx
  MetricsDisplay.tsx
  MetricsLine.tsx
  PreviewControls.tsx
  ScalingChart.tsx
  TextDisplay.tsx
lib/
  utils.ts
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
types/
  index.ts
utils/
  calculations.ts
  constants.ts
.eslintrc.json
.gitignore
components.json
fontmetrics.d.ts
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 221.2 83.2% 53.3%;
    --chart-2: 212 95% 68%;
    --chart-3: 216 92% 60%;
    --chart-4: 210 98% 78%;
    --chart-5: 212 97% 87%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 221.2 83.2% 53.3%;
    --chart-2: 212 95% 68%;
    --chart-3: 216 92% 60%;
    --chart-4: 210 98% 78%;
    --chart-5: 212 97% 87%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }

  [data-rehype-pretty-code-figure] code {
    display: grid;
    min-width: 100%;
    overflow-wrap: break-word;
    border-radius: 0;
    border-width: 0;
    background-color: transparent;
    padding: 0;
    counter-reset: line;
    -webkit-box-decoration-break: clone;
    box-decoration-break: clone;
  }

  [data-rehype-pretty-code-figure] [data-line] {
    display: inline-block;
    min-height: 1rem;
    width: 100%;
    padding: 0.125rem 1rem;
  }

  [data-rehype-pretty-code-figure] [data-line-numbers] [data-line] {
    padding-left: 0.5rem;
    padding-right: 0.5rem;
  }

  [data-rehype-pretty-code-figure] [data-line-numbers] > [data-line]:before {
    font-size: 0.75rem;
    line-height: 1rem;
    color: hsla(0, 0%, 98%, 0.4);
    counter-increment: line;
    content: counter(line);
    display: inline-block;
    width: 1.8rem;
    margin-right: 1.4rem;
    text-align: right;
  }

  [data-rehype-pretty-code-figure] .line--highlighted {
    background-color: rgba(63, 63, 70, 0.5);
  }
}

================
File: app/layout.tsx
================
import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 400 500 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 400 500 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

================
File: app/page.tsx
================
"use client";

import React, { useState, useEffect } from "react";
// import FontMetrics from "fontmetrics";
// import { FONT_FAMILY } from "../utils/constants";
import { MetricsDisplay } from "../components/MetricsDisplay";
import { TextDisplay } from "../components/TextDisplay";
import { Controls } from "../components/Controls";
import ScalingChart from "../components/ScalingChart";
import { PreviewControls } from "@/components/PreviewControls";
import { CSSDisplay } from "../components/CSSDisplay";
import { calculateSize } from "../utils/calculations";
import { FontMetricsType, SizeData } from "../types";
import { FONT_FAMILY } from "@/utils/constants";
// import ScalingChartTest from "@/components/ScalingChartTest";

const ScalingDemo = () => {
  const [fontSize, setFontSize] = useState(84);
  const [metrics, setMetrics] = useState<FontMetricsType | null>(null);
  const [supPosition, setSupPosition] = useState(-0.5);
  const [subPosition, setSubPosition] = useState(0.25);
  const [selectedScaling, setSelectedScaling] = useState("fluidDefault");

  useEffect(() => {
    /* const fontMetrics = FontMetrics({
      fontFamily: FONT_FAMILY,
      fontWeight: "normal",
      fontSize: 300,
      origin: "top",
    }); */

    const metricsDummy: FontMetricsType = {
      ascent: 0.27,
      baseline: 0.955,
      bottom: 1.2766666666666666,
      descent: 1.17,
      fontFamily: FONT_FAMILY,
      fontSize: 300,
      fontWeight: "normal",
      tittle: 0.06,
      top: 0,
      xHeight: 0.515,
    };

    setMetrics(metricsDummy);
  }, []);

  /* Generate size data points up to 160px in 12px increments
  const sizes: SizeData[] = Array.from(
    { length: Math.ceil(160 / 12) },
    (_, i) => {
      const parentSize = (i + 1) * 12;
      return {
        parentSize,
        subtle: calculateSize(parentSize, "subtle"),
        moderate: calculateSize(parentSize, "moderate"),
        minimum: calculateSize(parentSize, "minimum"),
        linear: calculateSize(parentSize, "linear"),
      };
    }
  ); */

  const sizes: SizeData[] = Array.from(
    { length: 168 - 12 + 1 }, // Include both 12 and 160
    (_, i) => {
      const parentSize = 12 + i; // Start from 12px
      return {
        parentSize,
        fluidSmaller: calculateSize(parentSize, "fluidSmaller"),
        fluidDefault: calculateSize(parentSize, "fluidDefault"),
        fluidLarger: calculateSize(parentSize, "fluidLarger"),
        staticDefault: calculateSize(parentSize, "staticDefault"),
      };
    }
  );

  return (
    <main className="relative min-h-screen w-full">
      {/* Fixed left section */}
      <div className="fixed bg-zinc-50 left-0 top-0 bottom-0 right-0 h-[50vh] md:h-full md:right-[50%] lg:right-[30%] md:border-r md:border-zinc-200 flex items-center justify-center">
        <div className="w-full">
          <div className="relative flex items-center justify-center">
            {metrics && (
              <MetricsDisplay metrics={metrics} fontSize={fontSize} />
            )}
            <TextDisplay
              fontSize={fontSize}
              selectedScaling={selectedScaling}
              supPosition={supPosition}
              subPosition={subPosition}
            />
          </div>
        </div>
      </div>

      {/* Right section with controls */}
      <div
        className="relative ml-auto w-full md:w-[50%] lg:w-[30%] min-h-screen p-6 bg-white top-[50vh] md:top-0 -mt-6 md:mt-0 z-10 border-t border-zinc-200 shadow-[0_-4px_12px_-3px_rgba(0,0,0,0.05)] rounded-t-xl md:border-none md:shadow-none md:rounded-none
md:shadow-none"
      >
        <div className="flex flex-col gap-12">
          <PreviewControls
            fontSize={fontSize}
            setFontSize={setFontSize}
          ></PreviewControls>
          <ScalingChart
            sizes={sizes}
            selectedScaling={selectedScaling}
            currentFontSize={fontSize}
          />

          <Controls
            fontSize={fontSize}
            setFontSize={setFontSize}
            supPosition={supPosition}
            setSupPosition={setSupPosition}
            subPosition={subPosition}
            setSubPosition={setSubPosition}
            selectedScaling={selectedScaling}
            setSelectedScaling={setSelectedScaling}
          />

          <CSSDisplay
            selectedScaling={selectedScaling}
            supPosition={supPosition}
            subPosition={subPosition}
          />
        </div>
      </div>
    </main>
  );
};

export default ScalingDemo;

================
File: components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/chart.tsx
================
"use client";

import * as React from "react";
import * as RechartsPrimitive from "recharts";

import { cn } from "@/lib/utils";

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const;

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode;
    icon?: React.ComponentType;
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  );
};

type ChartContextProps = {
  config: ChartConfig;
};

const ChartContext = React.createContext<ChartContextProps | null>(null);

function useChart() {
  const context = React.useContext(ChartContext);

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />");
  }

  return context;
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig;
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"];
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId();
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`;

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  );
});
ChartContainer.displayName = "Chart";

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    // eslint-disable-next-line
    ([_, config]) => config.theme || config.color
  );

  if (!colorConfig.length) {
    return null;
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color;
    return color ? `  --color-${key}: ${color};` : null;
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  );
};

const ChartTooltip = RechartsPrimitive.Tooltip;

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean;
      hideIndicator?: boolean;
      indicator?: "line" | "dot" | "dashed";
      nameKey?: string;
      labelKey?: string;
      selectedScaling?: string;
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
      selectedScaling,
    },
    ref
  ) => {
    const { config } = useChart();

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null;
      }

      const [item] = payload;
      const key = `${labelKey || item.dataKey || item.name || "value"}`;
      const itemConfig = getPayloadConfigFromPayload(config, item, key);
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label;

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        );
      }

      if (!value) {
        return null;
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>;
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ]);

    if (!active || !payload?.length) {
      return null;
    }

    const nestLabel = payload.length === 1 && indicator !== "dot";

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`;
            const itemConfig = getPayloadConfigFromPayload(config, item, key);
            // const indicatorColor = color || item.payload.fill || item.color;
            const isSelected = item.dataKey === selectedScaling;
            const isFluid = (item.dataKey as string).startsWith("fluid");
            const isStaticSelected = selectedScaling === "staticDefault";

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn("shrink-0 rounded-[2px]", {
                            "h-2.5 w-2.5": indicator === "dot",
                            "w-1": indicator === "line",
                            "w-0 border-dashed": indicator === "dashed",
                            "my-0.5": nestLabel && indicator === "dashed",
                            "border-[1px]": isFluid && !isSelected,
                          })}
                          style={
                            {
                              backgroundColor: isSelected
                                ? "rgba(24, 24, 27, 1)"
                                : isFluid && !isSelected
                                ? isStaticSelected
                                  ? "rgba(24, 24, 27, 0.25)"
                                  : "transparent"
                                : "rgba(24, 24, 27, 0.25)",
                              borderColor:
                                !isSelected && isFluid && !isStaticSelected
                                  ? "rgba(24, 24, 27, 1)"
                                  : "transparent",
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {typeof item.value === "number"
                            ? Number(item.value).toFixed(1)
                            : item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            );
          })}
        </div>
      </div>
    );
  }
);
ChartTooltipContent.displayName = "ChartTooltip";

const ChartLegend = RechartsPrimitive.Legend;

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean;
      nameKey?: string;
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart();

    if (!payload?.length) {
      return null;
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`;
          const itemConfig = getPayloadConfigFromPayload(config, item, key);

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          );
        })}
      </div>
    );
  }
);
ChartLegendContent.displayName = "ChartLegend";

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined;
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined;

  let configLabelKey: string = key;

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string;
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string;
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config];
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
};

================
File: components/ui/select.tsx
================
"use client";

import * as React from "react";
import {
  CaretSortIcon,
  CheckIcon,
  ChevronDownIcon,
  ChevronUpIcon,
} from "@radix-ui/react-icons";
import * as SelectPrimitive from "@radix-ui/react-select";

import { cn } from "@/lib/utils";

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <CaretSortIcon className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUpIcon />
  </SelectPrimitive.ScrollUpButton>
));
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDownIcon />
  </SelectPrimitive.ScrollDownButton>
));
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName;

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};

================
File: components/ui/slider.tsx
================
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

================
File: components/ui/tabs.tsx
================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: components/Controls.tsx
================
import React from "react";
import { Slider } from "@/components/ui/slider";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { SCALING_OPTIONS } from "../utils/constants";

type ScalingType = "fluid" | "static";

type ControlsProps = {
  fontSize: number;
  setFontSize: (value: number) => void;
  supPosition: number;
  setSupPosition: (value: number) => void;
  subPosition: number;
  setSubPosition: (value: number) => void;
  selectedScaling: string;
  setSelectedScaling: (value: string) => void;
};

export const Controls: React.FC<ControlsProps> = ({
  supPosition,
  setSupPosition,
  subPosition,
  setSubPosition,
  selectedScaling,
  setSelectedScaling,
}) => {
  // Determine the current scaling type based on the selected scaling option
  const getCurrentScalingType = (): ScalingType => {
    return selectedScaling === "staticDefault" ? "static" : "fluid";
  };

  // Get filtered scaling options based on the current type
  const getFilteredScalingOptions = (type: ScalingType) => {
    return Object.entries(SCALING_OPTIONS).filter(([key]) => {
      if (type === "static") {
        return false; // Don't show any options for static mode
      }
      return key.startsWith("fluid");
    });
  };

  // Handle tab change
  const handleTabChange = (value: string) => {
    if (value === "static") {
      setSelectedScaling("staticDefault");
    } else if (getCurrentScalingType() === "static") {
      setSelectedScaling("fluidDefault");
    }
  };

  return (
    <>
      <div>
        <p className="text-sm mb-3 text-zinc-900">Adjustments</p>
        <div>
          <Tabs
            value={getCurrentScalingType()}
            onValueChange={handleTabChange}
            className="w-full mb-3"
          >
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="fluid">Fluid</TabsTrigger>
              <TabsTrigger value="static">Static</TabsTrigger>
            </TabsList>
          </Tabs>

          <Select
            value={selectedScaling}
            onValueChange={setSelectedScaling}
            disabled={getCurrentScalingType() === "static"}
          >
            <SelectTrigger className="w-full">
              {getCurrentScalingType() === "static" ? (
                "Default"
              ) : (
                <SelectValue />
              )}
            </SelectTrigger>
            <SelectContent>
              {getFilteredScalingOptions(getCurrentScalingType()).map(
                ([key, { title }]) => (
                  <SelectItem key={key} value={key}>
                    {title}
                  </SelectItem>
                )
              )}
            </SelectContent>
          </Select>
        </div>

        <div className="mt-6">
          <label className="block text-sm font-medium mb-3">
            <span className="inline-block w-[140px]">
              Superscript Position:{" "}
            </span>
            <span className="font-mono">{supPosition.toFixed(3)}em</span>
          </label>
          <Slider
            value={[supPosition]}
            onValueChange={(value: number[]) => setSupPosition(value[0])}
            min={-1}
            max={0}
            step={0.01}
            className="w-full"
          />
        </div>

        <div className="mt-6">
          <label className="block text-sm font-medium mb-3">
            <span className="inline-block w-[140px]">Subscript Position: </span>

            <span className="font-mono">
              {"."}
              {subPosition.toFixed(3)}em
            </span>
          </label>
          <Slider
            value={[subPosition]}
            onValueChange={(value: number[]) => setSubPosition(value[0])}
            min={0}
            max={1}
            step={0.01}
            className="w-full"
          />
        </div>
      </div>
    </>
  );
};

================
File: components/CSSDisplay.tsx
================
// components/CSSDisplay.tsx
import React from "react";
import { Check, Copy } from "lucide-react";
import { SCALING_OPTIONS, BROWSER_SMALLER } from "../utils/constants";
import { calculateTopPosition } from "../utils/calculations";
import { cn } from "@/lib/utils";
import { unified } from "unified";
import remarkParse from "remark-parse";
import remarkRehype from "remark-rehype";
import rehypePrettyCode from "rehype-pretty-code";
import rehypeStringify from "rehype-stringify";

type CSSDisplayProps = {
  selectedScaling: string;
  supPosition: number;
  subPosition: number;
  className?: string;
};

export const CSSDisplay: React.FC<CSSDisplayProps> = ({
  selectedScaling,
  supPosition,
  subPosition,
  className,
}) => {
  const [hasCopied, setHasCopied] = React.useState(false);
  const [highlightedCode, setHighlightedCode] = React.useState("");
  const supStyle = calculateTopPosition(supPosition, selectedScaling);
  const subStyle = calculateTopPosition(subPosition, selectedScaling);

  const cssCode = `sup, sub {
  position: relative;
  vertical-align: baseline;
}

sup {
  font-size: ${SCALING_OPTIONS[selectedScaling].originalFormula};
  /* Formula: Parent font size × ${BROWSER_SMALLER} × Superscript Position (${supPosition}) */
  top: ${supStyle};
}

sub {
  font-size: ${SCALING_OPTIONS[selectedScaling].originalFormula};
  /* Formula: Parent font size × ${BROWSER_SMALLER} × Subscript Position (${subPosition}) */
  top: ${subStyle};
}`;

  React.useEffect(() => {
    const highlightCode = async () => {
      const result = await unified()
        .use(remarkParse)
        .use(remarkRehype)
        .use(rehypePrettyCode, {
          theme: "min-dark",
          keepBackground: false,
        })
        .use(rehypeStringify)
        .process("```css\n" + cssCode + "\n```");

      setHighlightedCode(String(result));
    };

    highlightCode();
  }, [cssCode]);

  const copyToClipboard = React.useCallback(async () => {
    await navigator.clipboard.writeText(cssCode);
    setHasCopied(true);
    setTimeout(() => setHasCopied(false), 2000);
  }, [cssCode]);

  return (
    <div className={cn("text-sm", className)}>
      <p className="text-sm mb-3 text-zinc-500">Current CSS</p>
      <div className="relative group">
        <button
          onClick={copyToClipboard}
          className="absolute right-4 top-4 opacity-0 transition group-hover:opacity-100 focus:opacity-100 z-10"
          aria-label="Copy code"
        >
          {hasCopied ? (
            <Check className="h-4 w-4 text-green-500" />
          ) : (
            <Copy className="h-4 w-4 text-zinc-500 hover:text-zinc-300" />
          )}
        </button>
        <div
          className="syntax-highlight mb-4 max-h-[650px] overflow-x-auto rounded-lg dark:border bg-zinc-950 py-4 dark:bg-zinc-900"
          dangerouslySetInnerHTML={{ __html: highlightedCode }}
        />
      </div>
    </div>
  );
};

================
File: components/MetricsDisplay.tsx
================
import React from "react";
import { MetricsLine } from "@/components/MetricsLine";
import { FontMetricsType } from "@/types/";

type MetricsDisplayProps = {
  metrics: FontMetricsType;
  fontSize: number;
};

export const MetricsDisplay: React.FC<MetricsDisplayProps> = ({
  metrics,
  fontSize,
}) => (
  <div className="absolute inset-0 flex items-start">
    <div className="relative w-full">
      <MetricsLine y={metrics.ascent} label="Ascent" fontSize={fontSize} />
      <MetricsLine y={metrics.xHeight} label="x-Height" fontSize={fontSize} />
      <MetricsLine y={metrics.baseline} label="Baseline" fontSize={fontSize} />
      <MetricsLine y={metrics.descent} label="Descent" fontSize={fontSize} />
    </div>
  </div>
);

================
File: components/MetricsLine.tsx
================
import React from "react";

interface MetricsLineProps {
  y: number;
  label?: string; // Made optional if not used
  fontSize: number;
}

export const MetricsLine: React.FC<MetricsLineProps> = ({
  y,
  label,
  fontSize,
}) => (
  <div
    className="absolute h-px left-2 right-2 md:left-4 md:right-4 flex items-center gap-2"
    style={{
      top: `${y * fontSize}px`,
    }}
  >
    <span className="text-xs md:text-sm px-1 text-zinc-400 whitespace-nowrap">
      {label}
    </span>
    <div
      className="flex-grow border-0.5 border-zinc-300 pointer-events-none"
      style={{
        borderTopWidth: "1px",
      }}
    />
  </div>
);

================
File: components/PreviewControls.tsx
================
import React from "react";
import { Slider } from "@/components/ui/slider";

type ControlsProps = {
  fontSize: number;
  setFontSize: (value: number) => void;
};

export const PreviewControls: React.FC<ControlsProps> = ({
  fontSize,
  setFontSize,
}) => {
  return (
    <>
      <div>
        <p className="text-sm mb-3 text-zinc-500">Preview</p>
        <div>
          <label className="block text-sm font-medium mb-3">
            <span className="inline-block w-[140px]">Font Size: </span>
            <span className="font-mono">{fontSize}px</span>
          </label>
          <Slider
            value={[fontSize]}
            onValueChange={(value: number[]) => setFontSize(value[0])}
            min={12}
            max={168}
            step={1}
            className="w-full"
          />
        </div>
      </div>
    </>
  );
};

================
File: components/ScalingChart.tsx
================
import React, { useEffect, useRef, useState } from "react";
import { LineChart, Line, XAxis, YAxis, CartesianGrid } from "recharts";
import {
  ChartConfig,
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
} from "@/components/ui/chart";
import { SCALING_OPTIONS } from "../utils/constants";
import { SizeData } from "../types";

function useResizeObserver(ref: React.RefObject<HTMLDivElement>) {
  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });

  useEffect(() => {
    const observeTarget = ref.current;
    if (!observeTarget) return;

    const resizeObserver = new ResizeObserver((entries) => {
      entries.forEach((entry) => {
        setDimensions({
          width: entry.contentRect.width,
          height: entry.contentRect.height,
        });
      });
    });

    resizeObserver.observe(observeTarget);

    return () => {
      resizeObserver.unobserve(observeTarget);
    };
  }, [ref]);

  return dimensions;
}

interface ScalingChartProps {
  sizes: SizeData[];
  selectedScaling: string;
  currentFontSize?: number;
}

interface DotProps {
  key: string;
  cx: number;
  cy: number;
  value: number;
  index: number;
  payload: {
    parentSize: number;
  };
}

export default function ScalingChart({
  sizes,
  selectedScaling,
  currentFontSize,
}: ScalingChartProps) {
  const containerRef = useRef(null);
  const { width, height } = useResizeObserver(containerRef);
  const chartConfig = {
    desktop: {
      label: "Desktop",
      color: "hsl(var(--chart-1))",
    },
  } satisfies ChartConfig;

  const CustomDot = React.forwardRef<SVGCircleElement, DotProps>(
    (props, ref) => {
      const { cx, cy, payload } = props;

      return (
        <circle
          ref={ref}
          cx={cx}
          cy={cy}
          r={payload.parentSize === currentFontSize ? 4 : 0}
          fill="white"
          stroke="rgba(24, 24, 27, 1)"
          strokeWidth={2}
        />
      );
    }
  );

  CustomDot.displayName = "CustomDot";

  const renderDot = ({ key, ...otherProps }: DotProps) => {
    return <CustomDot key={key} {...otherProps} />;
  };

  const getLineColor = (key: string) => {
    const isStatic = key === "staticDefault";
    const isSelected = key === selectedScaling;
    const selectedType =
      selectedScaling === "staticDefault" ? "static" : "fluid";

    if (isSelected) {
      return "rgba(24, 24, 27, 1)"; // Selected line is fully opaque
    } else if (
      (isStatic && selectedType === "fluid") ||
      (!isStatic && selectedType === "static")
    ) {
      return "rgba(24, 24, 27, 0.3)"; // Opposite type is very transparent
    } else {
      return "rgba(24, 24, 27, 1)"; // Same type but not selected is semi-transparent
    }
  };

  return (
    <>
      <p className="text-sm text-zinc-500">
        Superscript & Subscript Font Size in px
      </p>

      <div ref={containerRef} className="h-[300px]">
        <ChartContainer config={chartConfig} className="w-full h-full">
          <LineChart
            width={width || 400}
            height={height || 300}
            data={sizes}
            margin={{
              top: 12,
              right: 6,
              left: 0,
              bottom: 0,
            }}
          >
            <CartesianGrid vertical={false} />
            <XAxis
              dataKey="parentSize"
              stroke="var(--border)"
              tickLine={false}
              tickMargin={8}
            />
            <YAxis tickLine={false} stroke="var(--border)" width={32} />
            <ChartTooltip
              cursor={false}
              content={
                <ChartTooltipContent
                  selectedScaling={selectedScaling}
                  hideLabel
                />
              }
            />
            {Object.entries(SCALING_OPTIONS).map(([key, { title }]) => {
              const isSelected = key === selectedScaling;
              return (
                <Line
                  key={key}
                  type="monotone"
                  dataKey={key}
                  stroke={getLineColor(key)}
                  strokeWidth={isSelected ? 2 : 1}
                  name={title}
                  dot={isSelected ? renderDot : false}
                  isAnimationActive={false}
                />
              );
            })}
          </LineChart>
        </ChartContainer>
      </div>
    </>
  );
}

================
File: components/TextDisplay.tsx
================
import React from "react";
import { FONT_FAMILY, SCALING_OPTIONS } from "../utils/constants";
import { calculateTopPosition } from "../utils/calculations";

type TextDisplayProps = {
  fontSize: number;
  selectedScaling: string;
  supPosition: number;
  subPosition: number;
};

export const TextDisplay: React.FC<TextDisplayProps> = ({
  fontSize,
  selectedScaling,
  supPosition,
  subPosition,
}) => (
  <div
    className="relative font-normal leading-tight px-20 text-zinc-900 text-nowrap"
    style={{
      fontSize: `${fontSize}px`,
      fontFamily: FONT_FAMILY,
    }}
  >
    Hlop
    <sup
      className="relative align-baseline"
      style={{
        fontSize: SCALING_OPTIONS[selectedScaling].originalFormula,
        top: calculateTopPosition(supPosition, selectedScaling),
        fontFamily: FONT_FAMILY,
      }}
    >
      2
    </sup>{" "}
    x
    <sub
      className="relative align-baseline"
      style={{
        fontSize: SCALING_OPTIONS[selectedScaling].originalFormula,
        top: calculateTopPosition(subPosition, selectedScaling),
        fontFamily: FONT_FAMILY,
      }}
    >
      2
    </sub>
  </div>
);

================
File: lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: types/index.ts
================
export interface FontMetricsType {
  ascent: number;
  baseline: number;
  bottom: number;
  descent: number;
  fontFamily: string;
  fontSize: number;
  fontWeight: string;
  tittle: number;
  top: number;
  xHeight: number;
}

export interface SizeData {
  parentSize: number;
  fluidLarger: number;
  fluidDefault: number;
  fluidSmaller: number;
  staticDefault: number;
}

================
File: utils/calculations.ts
================
import { BROWSER_SMALLER, SCALING_OPTIONS } from "./constants";

export const calculateSize = (parentSize: number, scaling: string): number => {
  switch (scaling) {
    case "fluidSmaller":
      return 5 + parentSize * 0.4;
    case "fluidDefault":
      return 4 + parentSize * 0.5;
    case "fluidLarger":
      return 3 + parentSize * 0.6;
    case "statucDefault":
      return parentSize * BROWSER_SMALLER;
    default:
      return parentSize * BROWSER_SMALLER;
  }
};

export const calculateTopPosition = (
  position: number,
  scaling: string
): string => {
  const option = SCALING_OPTIONS[scaling];
  if (scaling === "staticDefault") {
    console.log("static position");
    return `${position}em`;
  }

  const scalingFactor = BROWSER_SMALLER * position * option.multiplier;
  const emValue = Math.round(scalingFactor * 100) / 100;
  const pxValue = Math.round(scalingFactor * option.offset * 100) / 100;

  // Determine if we need to add or subtract the px value
  const operator = pxValue >= 0 ? "-" : "+";
  const absolutePxValue = Math.abs(pxValue);

  return `calc(${emValue}em ${operator} ${absolutePxValue}px)`;
};

================
File: utils/constants.ts
================
export const FONT_FAMILY = "Times New Roman";

export const BROWSER_SMALLER = 0.83;

export interface ScalingOption {
  title: string;
  fontSizeFormula: string;
  originalFormula: string;
  dynamicValue: number;
  multiplier: number;
  offset: number;
}

export type ScalingOptions = {
  [key: string]: ScalingOption;
};

export const SCALING_OPTIONS: ScalingOptions = {
  staticDefault: {
    title: "Static",
    fontSizeFormula: "smaller",
    originalFormula: "smaller",
    dynamicValue: 1,
    multiplier: 1,
    offset: 0,
  },
  fluidLarger: {
    title: "Larger",
    fontSizeFormula: "calc(1.66667 * (1em - 3px))",
    originalFormula: "calc(0.6em + 3px)",
    dynamicValue: 0.6,
    multiplier: 1.66667,
    offset: 3,
  },
  fluidDefault: {
    title: "Default",
    fontSizeFormula: "calc(2 * (1em - 4px))",
    originalFormula: "calc(0.5em + 4px)",
    dynamicValue: 0.5,
    multiplier: 2,
    offset: 4,
  },
  fluidSmaller: {
    title: "Smaller",
    fontSizeFormula: "calc(2.5 * (1em - 5px))",
    originalFormula: "calc(0.4em + 5px)",
    dynamicValue: 0.4,
    multiplier: 2.5,
    offset: 5,
  },
};

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for commiting if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}

================
File: fontmetrics.d.ts
================
declare module "fontmetrics";

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "nextjs",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-icons": "^1.3.1",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-slider": "^1.2.1",
    "@radix-ui/react-tabs": "^1.1.1",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "fontmetrics": "^1.0.0",
    "lucide-react": "^0.453.0",
    "next": "15.0.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-icons": "^5.3.0",
    "recharts": "^2.10.1",
    "rehype-parse": "^9.0.1",
    "rehype-pretty-code": "^0.14.0",
    "rehype-stringify": "^10.0.1",
    "remark-parse": "^11.0.0",
    "remark-rehype": "^11.1.1",
    "shiki": "^1.22.2",
    "tailwind-merge": "^2.5.4",
    "tailwindcss-animate": "^1.0.7",
    "unified": "^11.0.5"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "@types/recharts": "^1.8.29",
    "eslint": "^8",
    "eslint-config-next": "15.0.1",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config: Config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        chart: {
          "1": "hsl(var(--chart-1))",
          "2": "hsl(var(--chart-2))",
          "3": "hsl(var(--chart-3))",
          "4": "hsl(var(--chart-4))",
          "5": "hsl(var(--chart-5))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
};
export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
